# Authors: L. J. Zachmann and N. T. Hobbs. 2021.

# Likelihood: gamma
# Design matrix for additional covariates, X: present
# Deterministic model: linear
# Group-level effects: b0
# Variance structure: fixed-stratum
# Release: v0.7.0

model {


    # ---- model checking -----------------------------------------------------
    # Quantities used for model checking (e.g., simulated data for comparison
    # to the observed data and Bayesian P values).
    for(n in 1:length(y)) {
        ## Random number generation for the gamma distribution with
        ## moment-matched shape and rate parameters.
        y.rep[n] ~ dgamma(mu[n]^2 / sigma.y[n]^2, mu[n] / sigma.y[n]^2) 
    }
    ## Bayesian P values.
    p.sd <- step(sd(y.rep[]) - sd(y[]))
    p.mean <- step(mean(y.rep[]) - mean(y[]))

    # ---- likelihood ---------------------------------------------------------
    for(n in 1:length(y)) {
        ## Linear deterministic model (w/ additional covariates).
        mu[n] <- B[y.site[n], 1, y.strata[n]] +
                    B[y.site[n], 2, y.strata[n]] * x[n] +
                    X[n, ] %*% Beta
        ## Gamma likelihood.
        sigma.y[n] <- sigma.ss[y.site[n], y.strata[n]]
        y[n] ~ dgamma(mu[n]^2 / sigma.y[n]^2, mu[n] / sigma.y[n]^2) 
        ## Residuals.
        y.hat[n] <- mu[n]
        epsilon[n] <- y[n] - y.hat[n]
    }

    # ---- priors -------------------------------------------------------------
    ### on sigma.y for each stratum.
    #for(k in 1:y.n.strata) {
    #    sigma.y[k] ~ dunif(0, 500)
    #}

    ### on sigma for each site and/or stratum.
    for(k in 1:y.n.strata) {
        for(j in 1:y.n.site[k]) {
            sigma.ss[j, k] <- sigma[k]
        }
        sigma[k] ~ dunif(0.0001, 10)
        #sigma[k] ~ dt(0, 1 / (10^2), 1) T(0,)
        #sigma[k] ~ dgamma(0.01, 0.01)
    }
    ## on the coefficients for each covariate.
    for(m in 1:length(X[1, ])) {
        Beta[m] ~ dnorm(0, 1E-04)
    }
    ## on intercept parameters for each site within each stratum. Slopes vary by
    ## stratum.
    for(k in 1:y.n.strata) {
        mu.B0[k] ~ dnorm(0, 4E-06)
        sigma.B0[k] ~ dunif(1E-6, 1000)
        tau.B0[k] <- 1 / sigma.B0[k]^2
        B1[k] ~ dnorm(0, 1E-04)
        for(j in 1:y.n.site[k]) {
            ### Intercepts vary by site and stratum.
            B0[j, k] ~ dnorm(mu.B0[k], tau.B0[k])
            ### Put coefficients into matrix form to make them compatible with
            ### the multiple slopes model.
            B[j, 1, k] <- B0[j, k]
            B[j, 2, k] <- B1[k]
        }
    }

}
